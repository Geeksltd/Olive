using System;
using System.Security.Cryptography;

namespace Olive.Security
{
    public static partial class Encryption
    {
        /// <summary>
        /// Encrypts the specified text with the specified encryption key.
        /// </summary>
        /// <param name="raw">The raw data to encrypt</param>
        /// <param name="encryptKey">The encryption key, previously generated by AssymetricKeyPair.Create()</param>
        public static byte[] EncryptAsymmetric(byte[] raw, string encryptKey)
        {
            if (raw == null) throw new ArgumentNullException(nameof(raw));
            if (encryptKey.IsEmpty()) throw new ArgumentNullException(nameof(encryptKey));

            return new RSACryptoServiceProvider().FromKey(encryptKey).Encrypt(raw, fOAEP: false);
        }

        /// <summary>
        /// Decrypts the specified text with the specified decryption key.
        /// </summary>
        /// <param name="cipher">The encrypted data to decrypt</param>
        /// <param name="decryptKey">The decryption key, previously generated by AssymetricKeyPair.Create()</param>
        public static byte[] DecryptAsymmetric(byte[] cipher, string decryptKey)
        {
            if (cipher == null) throw new ArgumentNullException(nameof(cipher));
            if (decryptKey.IsEmpty()) throw new ArgumentNullException(nameof(decryptKey));

            return new RSACryptoServiceProvider().FromKey(decryptKey).Decrypt(cipher, fOAEP: false);
        }
    }
}